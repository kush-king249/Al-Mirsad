#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Remote Access Management Module for Al-Mirsad
وحدة إدارة الوصول البعيد لأداة المرصاد

This module handles remote connections via SSH and PowerShell Remoting.
تتعامل هذه الوحدة مع الاتصالات البعيدة عبر SSH و PowerShell Remoting.
"""

import os
import logging
import subprocess
import platform
from typing import Dict, List, Optional, Tuple, Any
import paramiko
from paramiko import SSHClient, AutoAddPolicy, SFTPClient


class RemoteAccessManager:
    """
    Remote access management class for handling SSH and PowerShell connections.
    فئة إدارة الوصول البعيد للتعامل مع اتصالات SSH و PowerShell.
    """
    
    def __init__(self):
        """Initialize the RemoteAccessManager."""
        self.logger = self._setup_logger()
        self.active_connections = {}  # Track active SSH connections
    
    def _setup_logger(self) -> logging.Logger:
        """Setup logging for the module."""
        logger = logging.getLogger(__name__)
        logger.setLevel(logging.INFO)
        
        if not logger.handlers:
            handler = logging.StreamHandler()
            formatter = logging.Formatter(
                '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
            )
            handler.setFormatter(formatter)
            logger.addHandler(handler)
        
        return logger
    
    def create_ssh_connection(self, host: str, username: str, password: str = None,
                            key_path: str = None, port: int = 22, 
                            timeout: int = 30) -> Optional[SSHClient]:
        """
        Create SSH connection to remote host.
        إنشاء اتصال SSH إلى المضيف البعيد.
        
        Args:\n            host (str): Remote host IP or hostname\n            username (str): SSH username\n            password (str): SSH password (optional if using key)\n            key_path (str): Path to SSH private key (optional)\n            port (int): SSH port (default: 22)\n            timeout (int): Connection timeout in seconds\n            \n        Returns:\n            Optional[SSHClient]: SSH client object or None if failed\n        \"\"\"\n        try:\n            ssh_client = SSHClient()\n            ssh_client.set_missing_host_key_policy(AutoAddPolicy())\n            \n            # Attempt connection\n            if key_path and os.path.exists(key_path):\n                ssh_client.connect(\n                    hostname=host,\n                    port=port,\n                    username=username,\n                    key_filename=key_path,\n                    timeout=timeout\n                )\n                self.logger.info(f\"SSH connection established to {host} using key authentication\")\n            elif password:\n                ssh_client.connect(\n                    hostname=host,\n                    port=port,\n                    username=username,\n                    password=password,\n                    timeout=timeout\n                )\n                self.logger.info(f\"SSH connection established to {host} using password authentication\")\n            else:\n                raise ValueError(\"Either password or key_path must be provided\")\n            \n            # Store active connection\n            connection_id = f\"{host}:{port}\"\n            self.active_connections[connection_id] = ssh_client\n            \n            return ssh_client\n            \n        except Exception as e:\n            self.logger.error(f\"Failed to establish SSH connection to {host}: {str(e)}\")\n            return None\n    \n    def execute_ssh_command(self, ssh_client: SSHClient, command: str, \n                          timeout: int = 30) -> Tuple[int, str, str]:\n        \"\"\"\n        Execute command on remote host via SSH.\n        تنفيذ أمر على المضيف البعيد عبر SSH.\n        \n        Args:\n            ssh_client (SSHClient): SSH client object\n            command (str): Command to execute\n            timeout (int): Command timeout in seconds\n            \n        Returns:\n            Tuple[int, str, str]: (return_code, stdout, stderr)\n        \"\"\"\n        try:\n            stdin, stdout, stderr = ssh_client.exec_command(command, timeout=timeout)\n            \n            # Wait for command completion\n            exit_status = stdout.channel.recv_exit_status()\n            \n            # Read output\n            stdout_data = stdout.read().decode('utf-8', errors='ignore')\n            stderr_data = stderr.read().decode('utf-8', errors='ignore')\n            \n            self.logger.info(f\"SSH command executed: {command[:50]}... (exit code: {exit_status})\")\n            \n            return exit_status, stdout_data, stderr_data\n            \n        except Exception as e:\n            self.logger.error(f\"Error executing SSH command: {str(e)}\")\n            return -1, \"\", str(e)\n    \n    def transfer_file_ssh(self, ssh_client: SSHClient, local_path: str, \n                         remote_path: str, direction: str = 'upload') -> bool:\n        \"\"\"\n        Transfer file via SSH/SFTP.\n        نقل ملف عبر SSH/SFTP.\n        \n        Args:\n            ssh_client (SSHClient): SSH client object\n            local_path (str): Local file path\n            remote_path (str): Remote file path\n            direction (str): 'upload' or 'download'\n            \n        Returns:\n            bool: True if transfer successful, False otherwise\n        \"\"\"\n        try:\n            sftp = ssh_client.open_sftp()\n            \n            if direction.lower() == 'upload':\n                if not os.path.exists(local_path):\n                    self.logger.error(f\"Local file not found: {local_path}\")\n                    return False\n                \n                sftp.put(local_path, remote_path)\n                self.logger.info(f\"File uploaded: {local_path} -> {remote_path}\")\n                \n            elif direction.lower() == 'download':\n                sftp.get(remote_path, local_path)\n                self.logger.info(f\"File downloaded: {remote_path} -> {local_path}\")\n                \n            else:\n                self.logger.error(f\"Invalid direction: {direction}\")\n                return False\n            \n            sftp.close()\n            return True\n            \n        except Exception as e:\n            self.logger.error(f\"Error transferring file: {str(e)}\")\n            return False\n    \n    def execute_powershell_remote(self, host: str, username: str, password: str,\n                                command: str, timeout: int = 30) -> Tuple[int, str, str]:\n        \"\"\"\n        Execute PowerShell command on remote Windows host.\n        تنفيذ أمر PowerShell على مضيف Windows بعيد.\n        \n        Args:\n            host (str): Remote host IP or hostname\n            username (str): Windows username\n            password (str): Windows password\n            command (str): PowerShell command to execute\n            timeout (int): Command timeout in seconds\n            \n        Returns:\n            Tuple[int, str, str]: (return_code, stdout, stderr)\n        \"\"\"\n        try:\n            # Build PowerShell remoting command\n            ps_command = (\n                f'Invoke-Command -ComputerName {host} '\n                f'-Credential (New-Object System.Management.Automation.PSCredential '\n                f'(\"{username}\", (ConvertTo-SecureString \"{password}\" -AsPlainText -Force))) '\n                f'-ScriptBlock {{{{ {command} }}}}'\n            )\n            \n            # Execute via subprocess\n            result = subprocess.run(\n                ['powershell', '-Command', ps_command],\n                capture_output=True,\n                text=True,\n                timeout=timeout\n            )\n            \n            self.logger.info(f\"PowerShell remote command executed on {host} (exit code: {result.returncode})\")\n            \n            return result.returncode, result.stdout, result.stderr\n            \n        except subprocess.TimeoutExpired:\n            self.logger.error(f\"PowerShell remote command timed out on {host}\")\n            return -1, \"\", \"Command timed out\"\n        except Exception as e:\n            self.logger.error(f\"Error executing PowerShell remote command: {str(e)}\")\n            return -1, \"\", str(e)\n    \n    def test_connectivity(self, host: str, port: int = 22, timeout: int = 5) -> bool:\n        \"\"\"\n        Test network connectivity to remote host.\n        اختبار الاتصال الشبكي إلى المضيف البعيد.\n        \n        Args:\n            host (str): Remote host IP or hostname\n            port (int): Port to test (default: 22 for SSH)\n            timeout (int): Connection timeout in seconds\n            \n        Returns:\n            bool: True if host is reachable, False otherwise\n        \"\"\"\n        try:\n            import socket\n            \n            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n            sock.settimeout(timeout)\n            \n            result = sock.connect_ex((host, port))\n            sock.close()\n            \n            if result == 0:\n                self.logger.info(f\"Connectivity test successful: {host}:{port}\")\n                return True\n            else:\n                self.logger.warning(f\"Connectivity test failed: {host}:{port}\")\n                return False\n                \n        except Exception as e:\n            self.logger.error(f\"Error testing connectivity to {host}:{port}: {str(e)}\")\n            return False\n    \n    def get_system_info_ssh(self, ssh_client: SSHClient) -> Dict[str, str]:\n        \"\"\"\n        Get system information from remote host via SSH.\n        الحصول على معلومات النظام من المضيف البعيد عبر SSH.\n        \n        Args:\n            ssh_client (SSHClient): SSH client object\n            \n        Returns:\n            Dict[str, str]: System information\n        \"\"\"\n        system_info = {}\n        \n        try:\n            # Get OS information\n            exit_code, stdout, stderr = self.execute_ssh_command(ssh_client, 'uname -a')\n            if exit_code == 0:\n                system_info['os_info'] = stdout.strip()\n            \n            # Get hostname\n            exit_code, stdout, stderr = self.execute_ssh_command(ssh_client, 'hostname')\n            if exit_code == 0:\n                system_info['hostname'] = stdout.strip()\n            \n            # Get uptime\n            exit_code, stdout, stderr = self.execute_ssh_command(ssh_client, 'uptime')\n            if exit_code == 0:\n                system_info['uptime'] = stdout.strip()\n            \n            # Get disk usage\n            exit_code, stdout, stderr = self.execute_ssh_command(ssh_client, 'df -h')\n            if exit_code == 0:\n                system_info['disk_usage'] = stdout.strip()\n            \n            # Get memory info\n            exit_code, stdout, stderr = self.execute_ssh_command(ssh_client, 'free -h')\n            if exit_code == 0:\n                system_info['memory_info'] = stdout.strip()\n            \n            # Get network interfaces\n            exit_code, stdout, stderr = self.execute_ssh_command(ssh_client, 'ip addr show')\n            if exit_code == 0:\n                system_info['network_interfaces'] = stdout.strip()\n            \n            self.logger.info(\"System information collected via SSH\")\n            \n        except Exception as e:\n            self.logger.error(f\"Error collecting system information: {str(e)}\")\n        \n        return system_info\n    \n    def get_system_info_powershell(self, host: str, username: str, password: str) -> Dict[str, str]:\n        \"\"\"\n        Get system information from remote Windows host via PowerShell.\n        الحصول على معلومات النظام من مضيف Windows بعيد عبر PowerShell.\n        \n        Args:\n            host (str): Remote host IP or hostname\n            username (str): Windows username\n            password (str): Windows password\n            \n        Returns:\n            Dict[str, str]: System information\n        \"\"\"\n        system_info = {}\n        \n        try:\n            # Get OS information\n            exit_code, stdout, stderr = self.execute_powershell_remote(\n                host, username, password, 'Get-ComputerInfo | Select-Object WindowsProductName, WindowsVersion'\n            )\n            if exit_code == 0:\n                system_info['os_info'] = stdout.strip()\n            \n            # Get hostname\n            exit_code, stdout, stderr = self.execute_powershell_remote(\n                host, username, password, '$env:COMPUTERNAME'\n            )\n            if exit_code == 0:\n                system_info['hostname'] = stdout.strip()\n            \n            # Get uptime\n            exit_code, stdout, stderr = self.execute_powershell_remote(\n                host, username, password, \n                '(Get-Date) - (Get-CimInstance -ClassName Win32_OperatingSystem).LastBootUpTime'\n            )\n            if exit_code == 0:\n                system_info['uptime'] = stdout.strip()\n            \n            # Get disk usage\n            exit_code, stdout, stderr = self.execute_powershell_remote(\n                host, username, password, \n                'Get-WmiObject -Class Win32_LogicalDisk | Select-Object DeviceID, Size, FreeSpace'\n            )\n            if exit_code == 0:\n                system_info['disk_usage'] = stdout.strip()\n            \n            # Get memory info\n            exit_code, stdout, stderr = self.execute_powershell_remote(\n                host, username, password, \n                'Get-WmiObject -Class Win32_ComputerSystem | Select-Object TotalPhysicalMemory'\n            )\n            if exit_code == 0:\n                system_info['memory_info'] = stdout.strip()\n            \n            self.logger.info(\"System information collected via PowerShell\")\n            \n        except Exception as e:\n            self.logger.error(f\"Error collecting system information via PowerShell: {str(e)}\")\n        \n        return system_info\n    \n    def close_connection(self, host: str, port: int = 22):\n        \"\"\"\n        Close SSH connection to specific host.\n        إغلاق اتصال SSH إلى مضيف محدد.\n        \n        Args:\n            host (str): Remote host IP or hostname\n            port (int): SSH port\n        \"\"\"\n        connection_id = f\"{host}:{port}\"\n        \n        if connection_id in self.active_connections:\n            try:\n                self.active_connections[connection_id].close()\n                del self.active_connections[connection_id]\n                self.logger.info(f\"SSH connection closed: {connection_id}\")\n            except Exception as e:\n                self.logger.error(f\"Error closing SSH connection {connection_id}: {str(e)}\")\n    \n    def close_all_connections(self):\n        \"\"\"\n        Close all active SSH connections.\n        إغلاق جميع اتصالات SSH النشطة.\n        \"\"\"\n        for connection_id, ssh_client in list(self.active_connections.items()):\n            try:\n                ssh_client.close()\n                self.logger.info(f\"SSH connection closed: {connection_id}\")\n            except Exception as e:\n                self.logger.error(f\"Error closing SSH connection {connection_id}: {str(e)}\")\n        \n        self.active_connections.clear()\n        self.logger.info(\"All SSH connections closed\")\n    \n    def get_active_connections(self) -> List[str]:\n        \"\"\"\n        Get list of active SSH connections.\n        الحصول على قائمة اتصالات SSH النشطة.\n        \n        Returns:\n            List[str]: List of active connection IDs\n        \"\"\"\n        return list(self.active_connections.keys())\n    \n    def execute_batch_commands(self, ssh_client: SSHClient, \n                             commands: List[str], timeout: int = 30) -> List[Tuple[str, int, str, str]]:\n        \"\"\"\n        Execute multiple commands in batch on remote host.\n        تنفيذ عدة أوامر دفعة واحدة على المضيف البعيد.\n        \n        Args:\n            ssh_client (SSHClient): SSH client object\n            commands (List[str]): List of commands to execute\n            timeout (int): Timeout for each command\n            \n        Returns:\n            List[Tuple[str, int, str, str]]: List of (command, exit_code, stdout, stderr)\n        \"\"\"\n        results = []\n        \n        for command in commands:\n            try:\n                exit_code, stdout, stderr = self.execute_ssh_command(ssh_client, command, timeout)\n                results.append((command, exit_code, stdout, stderr))\n                \n                if exit_code != 0:\n                    self.logger.warning(f\"Command failed: {command} (exit code: {exit_code})\")\n                    \n            except Exception as e:\n                self.logger.error(f\"Error executing command '{command}': {str(e)}\")\n                results.append((command, -1, \"\", str(e)))\n        \n        self.logger.info(f\"Batch execution completed: {len(commands)} commands\")\n        return results"
